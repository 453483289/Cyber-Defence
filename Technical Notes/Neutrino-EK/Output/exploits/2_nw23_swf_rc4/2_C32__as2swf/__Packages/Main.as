class Main
{
   static var _osx = System.capabilities.version.toUpperCase().indexOf("MAC") >= 0;
   function Main()
   {
   }
   static function main(mc)
   {
      try
      {
         if(Main._txt)
         {
            return undefined;
         }
         var _loc3_ = new Date();
         Main._txt = _root.createTextField("txt",0,0,0,200 - 1,400 - 1);
         Main._txt.wordWrap = true;
         Main._txt.type = "input";
         var _loc4_ = new TextFormat();
         _loc4_.size = 16;
         Main._txt.setNewTextFormat(_loc4_);
         if(!Main._gc)
         {
            Main._gc = new Array();
         }
         Main._lc = new LocalConnection();
         Main._lc.start = function()
         {
            Main._txt.text = "";
            var _loc2_ = 0;
            while(_loc2_ < 3)
            {
               if(Main.Start(_loc2_))
               {
                  break;
               }
               _loc2_ = _loc2_ + 1;
            }
         };
         Main._lcId = "" + _loc3_.getHours() + _loc3_.getMinutes() + (_loc3_.getSeconds() >>> 2);
         try
         {
            if(!Main._lc.connect("toAS2" + Main._lcId))
            {
               Main.Trace("connect " + Main._lcId + " fail");
            }
         }
         catch(register0)
         {
            §§push((Error)_loc0_);
            if((Error)_loc0_ != null)
            {
               var e = §§pop();
               Main.Trace("connect " + Main._lcId + " " + e);
            }
            §§pop();
            throw _loc0_;
         }
         Main._lc.send("toAS3" + Main._lcId,"start");
      }
      catch(register0)
      {
         §§push((Error)_loc0_);
         if((Error)_loc0_ != null)
         {
            var e = §§pop();
            Main.Trace("main " + e);
         }
         §§pop();
         throw _loc0_;
      }
   }
   static function Trace(s)
   {
      var _loc3_ = Main._txt.length;
      Main._txt.replaceText(_loc3_,_loc3_,s + "\n");
   }
   static function Throw(s)
   {
      throw new Error(s);
   }
   static function Hex(n)
   {
      if(n < 0)
      {
         var _loc3_ = (n & 16777215).toString(16);
         while(_loc3_.length < 6)
         {
            _loc3_ = "0" + _loc3_;
         }
         n = n >>> 24;
         _loc3_ = (n & 255).toString(16) + _loc3_;
      }
      else
      {
         _loc3_ = n.toString(16);
      }
      if(_loc3_.length > 1)
      {
         _loc3_ = "0x" + _loc3_;
      }
      return _loc3_;
   }
   static function Compare1(a1, a2)
   {
      Main._cnt = Main._cnt + 1;
      if(Main._cnt == Main._c1)
      {
         return 1;
      }
      if(Main._cnt == Main._c2)
      {
         _global.ASnative(2204,310).call(Main._tf,Main._str);
      }
      return 0;
   }
   static function Compare2(a1, a2)
   {
      Main._cnt = Main._cnt + 1;
      if(Main._cnt == Main._c1)
      {
         return 1;
      }
      if(Main._cnt == Main._c2)
      {
         var _loc4_ = _global.ASnative(2204,309).call(Main._tf);
         var _loc5_ = _loc4_.charCodeAt(1);
         if(_loc5_ == 52)
         {
            var _loc6_ = _loc4_.charCodeAt(0);
            var _loc7_ = [0];
            _loc5_ = _loc6_ + 6;
            while(_loc5_ > _loc6_)
            {
               Main._tfs[_loc5_].tabStops = _loc7_;
               _loc5_ = _loc5_ - 1;
            }
            Main._tfId = _loc6_;
            _global.ASnative(2204,310).call(Main._tf,"01234567");
         }
         else
         {
            var _loc8_ = _loc4_.length;
            var _loc9_ = "len " + _loc8_ + " ";
            _loc5_ = 0;
            while(_loc5_ < Math.min(_loc8_,16))
            {
               _loc9_ = _loc9_ + (Main.Hex(_loc4_.charCodeAt(_loc5_)) + ",");
               _loc5_ = _loc5_ + 1;
            }
            Main.Trace(_loc9_);
         }
      }
      return 0;
   }
   static function MemDis(freeAddr)
   {
      try
      {
         var _loc4_ = !Main._osx?20:18;
         var _loc5_ = new Array(_loc4_);
         var _loc3_ = 0;
         while(_loc3_ < _loc4_)
         {
            _loc5_[_loc3_] = 0;
            _loc3_ = _loc3_ + 1;
         }
         if(freeAddr)
         {
            _loc5_[!Main._osx?7:11] = freeAddr >>> 3;
         }
         if(Main._osx)
         {
            Main._c1 = 143;
            Main._c2 = 162;
         }
         else
         {
            Main._c1 = 119;
            Main._c2 = 195;
         }
         var _loc6_ = {toString:function()
         {
            _global.ASnative(2204,200).call(Main._tf);
         }};
         _loc4_ = !Main._osx?42 * 2 + 20:46 * 5 + 20;
         Main._cnt = 0;
         var _loc7_ = new Array(_loc4_);
         Main._gc.push(_loc7_,_loc5_);
         _loc3_ = 0;
         while(_loc3_ < _loc4_)
         {
            _loc7_[_loc3_] = _loc3_ != _loc4_ - 2?new TextFormat():new TxtFormat(_loc6_);
            _loc3_ = _loc3_ + 1;
         }
         if(freeAddr)
         {
            _loc5_.sort(Main.Compare2);
         }
         else
         {
            _loc5_.sort(Main.Compare1);
            _loc4_ = _loc5_.length;
            _loc3_ = 0;
            while(_loc3_ < _loc4_)
            {
               if(_loc5_[_loc3_] != 0)
               {
                  var _loc8_ = _loc5_[_loc3_] << 3;
                  Main.Trace("[" + _loc3_ + "] " + Main.Hex(_loc8_));
                  return _loc8_;
               }
               _loc3_ = _loc3_ + 1;
            }
         }
         if(Main._cnt != Main._c2)
         {
            Main.Trace("cnt " + Main._cnt);
         }
      }
      catch(register0)
      {
         §§push((Error)_loc0_);
         if((Error)_loc0_ != null)
         {
            var e = §§pop();
            Main.Trace("E3 " + e);
         }
         §§pop();
         throw _loc0_;
      }
      return 0;
   }
   static function Start(cnt)
   {
      try
      {
         Main.Trace("start");
         var _loc5_ = 1016 / 4 - 1;
         var _loc6_ = new Array(0);
         if(!Main._str)
         {
            var _loc4_ = 1016 - 4;
            var _loc7_ = new Array(_loc4_);
            var _loc3_ = 0;
            while(_loc3_ < _loc4_)
            {
               _loc7_[_loc3_] = 65;
               _loc3_ = _loc3_ + 1;
            }
            Main._str = String.fromCharCode.apply(null,_loc7_);
            Main._arr = new Array(_loc5_);
            _loc3_ = 0;
            while(_loc3_ < _loc5_)
            {
               Main._arr[_loc3_] = 1192960;
               _loc3_ = _loc3_ + 1;
            }
            Main._arr.toString = function()
            {
               return " ";
            };
            Main._gc.push(_loc7_,Main._str,Main._arr);
         }
         _loc4_ = 60;
         Main._tfs = new Array(_loc4_);
         Main._gc.push(Main._tfs);
         _loc3_ = 0;
         while(_loc3_ < _loc4_)
         {
            Main._tfs[_loc3_] = new TextFormat();
            _loc3_ = _loc3_ + 1;
         }
         _loc3_ = 0;
         while(_loc3_ < _loc4_)
         {
            Main._arr[1] = _loc3_;
            Main._arr[_loc5_ - 1] = 1192960 + _loc3_;
            Main._tfs[_loc3_].tabStops = Main._arr;
            _loc3_ = _loc3_ + 1;
         }
         Main._tfs[43].tabStops = _loc6_;
         Main._tfs[38].tabStops = _loc6_;
         Main._tfs[32].tabStops = _loc6_;
         Main._tfs[31].tabStops = _loc6_;
         var _loc8_ = Main.MemDis();
         Main._tfId = 0;
         if(_loc8_ < 4096)
         {
            Main.Trace("bad alloc" + (cnt < 2?"":"\n64-bit player?"));
         }
         Main.MemDis((_loc8_ & -4096) + 4096 - 8);
         Main._lc.send("toAS3" + Main._lcId,"end");
         return Main._tfId;
      }
      catch(register0)
      {
         §§push((Error)_loc0_);
         if((Error)_loc0_ != null)
         {
            var e = §§pop();
            Main.Trace("Start " + e);
         }
         §§pop();
         throw _loc0_;
      }
      return 0;
   }
}
